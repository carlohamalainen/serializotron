syntax = "proto3";
package szt;

// Top-level SZT file format
message SZTFile {
  uint32 schema_version = 1;
  DynamicValue value = 2;
  map<uint32, DynamicValue> shared_values = 3;  // Deduplication table
  map<uint32, TypeInfo> shared_type_info = 4;    // Shared type metadata
}

// Core dynamic value representation
message DynamicValue {
  DynamicCore core = 1;
  TypeInfo type_info = 2;
  uint32 type_info_ref = 3;
}

message DynamicCore {
  oneof core {
    PrimitiveValue primitive = 1;
    ProductValue product = 2;
    SumValue sum = 3;
    ListValue list = 4;
    UnitValue unit = 5;
    ReferenceValue reference = 6;  // Reference to shared value
  }
}

// Reference to a shared value
message ReferenceValue {
  uint32 reference_id = 1;
}

// Primitive value types
message PrimitiveValue {
  oneof primitive {
    int64 int_val = 1;      // For Int, Int64
    double double_val = 2;
    string text_val = 3;
    bool bool_val = 4;
    uint64 word64_val = 5;
    int32 int32_val = 6;    // For Int32
    uint32 word32_val = 7;  // For Word32
    string integer_val = 8; // For arbitrary precision Integer
    bytes bytes_val = 9;    // For ByteString
    // Smaller types can be stored in larger containers
    // int32 covers Int8, Int16, Int32
    // uint32 covers Word8, Word16, Word32
  }
}

// Product types (records, tuples)
message ProductValue {
  repeated DynamicValue fields = 1;
}

// Sum types (constructors)
message SumValue {
  string constructor_name = 1;   // Stable constructor identifier
  DynamicValue value = 2;
  uint32 constructor_index = 3;  // Position within TypeInfo.constructors
}

// List types
message ListValue {
  repeated DynamicValue elements = 1;
}

// Unit type (empty constructors)
message UnitValue {
  // Empty - just a marker
}

// Type metadata for compatibility checking
message TypeInfo {
  string type_name = 1;      // "Foo"
  string module_name = 2;    // "MyModule"
  repeated string constructors = 3;   // ["A", "B", "C"]
  repeated string field_labels = 4;   // Record field names in order
  TypeStructure structure = 5;
}

message TypeStructure {
  oneof structure {
    PrimitiveType primitive = 1;
    ProductStructure product = 2;
    SumStructure sum = 3;
    ListStructure list = 4;
    UnitStructure unit = 5;
  }
}

enum PrimitiveType {
  PRIMITIVE_INT = 0;
  PRIMITIVE_DOUBLE = 1;
  PRIMITIVE_TEXT = 2;
  PRIMITIVE_BOOL = 3;
  PRIMITIVE_WORD64 = 4;
  PRIMITIVE_INT32 = 5;
  PRIMITIVE_WORD32 = 6;
  PRIMITIVE_INTEGER = 7;
  PRIMITIVE_BYTES = 8;
}

message ProductStructure {
  message FieldInfo {
    string field_name = 1;
    TypeInfo field_type = 2;
  }

  repeated FieldInfo fields = 1;
}

message SumStructure {
  repeated TypeInfo constructor_types = 1;
}

message ListStructure {
  TypeInfo element_type = 1;
}

message UnitStructure {
  // Empty
}
